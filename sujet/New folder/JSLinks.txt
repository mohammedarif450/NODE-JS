Anchoring:

^ - caret - may be used for beginning of a string. 
$ -  dollor  - used to indicate end

-------- Ex.
s1= “JavaScript is great”
s2= “The power of JavaScript”
s3= “What is JavaScript?”

^javascript will only match with s1 string.
javascript$ will only match sith s2 string.
^javascript$ will only match with "javascript"
===========================================================

Regular expressions in JavaScript - Character Escaping
=====================================================
Sometimes, meta-meaning characters, such as (^) or ($) and other special ones need to be included within the string to be searched for, representing the corresponding character instead of having the special meaning in the context of regular expressions syntax. To do so, we need to escape them properly in the string, with a backslash. If a backslash has to be represented too, it must be escaped with another backslash (two slashes \\).

Let’s see it in action:

\^ is used to mark the beginning of the string   // Matches any string with a caret (^) in it.

\$ is used to mark the end of the string   // Matches any string with the dollar sign ($) in it.
================================================================================================

Character Sets
==============

Anything enclosed in the special square brace brackets [ and ] is a character class, a set of characters to which a matched character must belong. Please note that the expression in the square brackets matches only a simple character.

We can list a set, such as:

[aeiou]

which means any vowel.

Or something like this:

[12345]

which matches “1” and “3” but not “a” or “6”.

We can also describe a range, or set of ranges with the special hyphen character:

[1-5]   // Same as previous example.

[a-z]   // Matches any lowercase letter.

[a-zA-Z]   // Matches  any alphabetic character in lowercase or uppercase.

[0-9a-zA-Z]   // Matches any letter or digit.

Besides, we can use sets to specify that a character cannot be a member of a set.

For example:

[^a-z]   // Matches any character that is not between a and z.

The caret symbol means "not" when it is placed inside the square brackets. As we have seen previously, it has a different meaning when it’s used outside, anchoring the beginning of a string.


=====================================================================================

Repetition 
==========

Often, it’s useful to specify that there might be multiple occurrences of a particular string. We can represent this using the following special characters: “?”, “+” and “*”. Specifically, “?” means that the preceding character is optional, “+” means one or more of the previous character, while “*” means zero or more of the previous character.

Let’s see some examples to clarify this concept:

comput?er    // Matches “computer” and “compuer”, but not “computter”.

comput+er   // Matches “computer” and “computter”, but not “compuer”.

comput*er   // Matches “compuer” and “computter” but not “coputer”.

^[a-zA-Z]+$   // Matches any string of one or more letters and nothing else.

======================================================================================

Subexpressions
==============

Sometimes, it’s good to be able to split an expression into subexpressions, so, it’s possible, for example, to represent “at least one of these strings followed by exactly one of those.” We can achieve this using parentheses and combinations of the special characters ?,+ and *, exactly as we would do in an arithmetic expression.

For example,

(good)?computer    // Matches “good computer” and “computer”, but not “good good computer”.

(good)+computer   // Matches “good computer” and “good good computer” but not “computer”.

(good)*computer   // Matches “computer” and “good good computer” but not “good computers”.


==================================================================================================================
Counted Subexpressions
======================
We can specify how many times something can be repeated by using a numerical expression in curly braces ({ }). 

We can define an exact number of repetitions ({3} means exactly 3 repetitions), 
a range of repetitions ({2,4} means from 2 to 4 repetitions), or 
an open-ended range of repetitions ({2,} means at least two repetitions).

For example,

computer{1,3}   // Matches “computer”, “computer computer” and “computer computer computer”.

=====================================================================================================================

Branching
=========
Another useful option in building regular expressions is to represent choices for a string. This is done with a vertical pipe (|).

For example, if we want to match several domains, such as com, edu or net, the following expression would  be used:

( com)|(edu)|(net)
====================================================================================================================

Summary of special characters
===============================

Here are a few special characters that can be used for matching characters in regular expressions:

\n     // a newline character

.       // any character except a newline

\r      // a carriage return character

\t      // a tab character

\b     // a word boundary (the start or end of a word)

\B    // anything but a word boundary.

\d     // any digit (same as [0-9])

\D    // anything but a digit (same as [^0-9])

\s     // single whitespace (space, tab, newline, etc.)

\S    // single nonwhitespace.

\w    // A “word character” (same as [0-9a-zA-Z_])

\W   // A “nonword character (same as [^0-9a-zA-Z_]

===========================================================================================================
Using regular expressions in JavaScript
=======================================
Using regular expressions in JavaScript is very easy, often being passed over by people who don’t know that it can be done, or by developers arguing that parsing regular expressions slows down client-side applications. Whatever the reasons are, let’s show how we can create a regular expression in JavaScript:

var re = /regexp/;

where regexp is the regular expression itself. Extending the concept to our first example presented in the basics section, let’s build one that detects the string “JavaScript”:

var re = /JavaScript/;

As default behavior, JavaScript regular expressions are case sensitive and only search for the first match in any given string. But we can add more functionality by adding the g and i modifiers (g for global and i for insensitive). Annexing the modifiers after the last /, we can make a regular expression search for all matches in the string and ignore case. Once again, let’s see some examples to properly understand these concepts.

Given the string “example1 Example2 EXAMPLE3”, the following regular expressions match as listed below:

/Example[0-9]+/   // Matches “Example2”

/Example[0-9]+/i   // Matches “example1”

/Example[0-9]+/gi   // Matches “example1”, “Example2” and “EXAMPLE3”

As seen in the previous examples, the use of “i” and “g” modifiers increases noticeably the matching capabilities of regular expressions.  So don’t forget they exist when you code your next script.

=====================================================================================================

Applying methods to JavaScript strings
======================================

Using a regular expression is easy. Every JavaScript variable containing a text string is able to support four main methods (in Object Oriented parlance) or functions to work with regular expressions. They are match(), replace(), search() and test(), the last one being an object method rather than a string method.


=====================================================================
The match() method
====================

The match() method takes a regular expression as a parameter and returns an array of all the matching strings found in the string given. If no matches are found, then match() returns false. Let’s say we want to check the proper format for a phone number entered by a user, with the form of  (XXX) XXX-XXXX. The code listed below does that:

function checkPhone( phone ) {
  phoneRegex = /^\(\d\d\d\) \d\d\d-\d\d\d\d$/;
 if( !phone.match( phoneRegex ) ) {
  alert( ‘Please enter a valid phone number’ );
  return false;
 }
 return true;
}

Let’s break down the code to understand how it works. First, we define a function that will check if the phone number entered has a valid format. Next, we declare the regular expression to define our pattern. It begins with ^, to indicate that any match must begin at the start of the string. Then we have \(, which will match the opening parenthesis. As seen previously, the character is escaped with a backslash to remove its special meaning in regular expression syntax. As mentioned, \d is a special code that matches any digit. The expression \d\d\d matches any three digits (same effect is achieved with [0-9] [0-9] [0-9]).

The rest of the pattern is pretty easy to understand. \) matches the closing parenthesis, the space matches the proper space for the phone number, then \d\d\d-\d\d\d\d matches three any digits followed by a dash, and then followed by four any digits.Finally, the $ indicates that any match must end at the end of the string.

It’s possible to short the regular expression as follows:

phoneRegex = /^\(\d{3]\) \d{3}-\d{4}$/;

Once we have seen in detail the regular expression pattern, let’s see how our function works. It checks whether or not the string contained in phone, passed as a parameter, matches our regular expression. If it does, then an array will be returned which JavaScript will evaluate as true. Otherwise it will return false, displaying the proper error message to the user.This kind of function is commonly used to validate user input data coming from HTML forms, chaining several specific functions to check if data entered is valid or not.

====================================



https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp

https://gobyexample.com/regular-expressions

http://javascript.info/tutorial/regular-expressions-javascript

http://www.rexegg.com/

step by step regular expression javascript

http://www.smashingmagazine.com/2009/05/06/introduction-to-advanced-regular-expressions/

https://developer.mozilla.org/en-US/search?q=regular+expression

http://www.mediasonics.ch/modx/javascript-dom-document-object-model

http://www.devarticles.com/c/a/JavaScript/Regular-expressions-in-JavaScript/2/

http://www.devarticles.com/c/a/JavaScript/Form-Validation-with-JavaScript-Regular-Expressions-Part-1/

http://www.devarticles.com/c/a/JavaScript/Form-Validation-with-JavaScript-Regular-Expressions-Part-2/

http://www.devarticles.com/c/a/JavaScript/Introduction-to-Regular-Expressions-in-JavaScript/

http://www.devarticles.com/c/a/JavaScript/Range-of-Characters-and-More-Regular-Expressions-in-JavaScript/

http://www.devarticles.com/c/a/JavaScript/JavaScript-String-Regular-Expressions/